name: Draw.io Files Processing

on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to process (leave empty for all files)'
        required: false
        default: ''

env:
  # Draw.io configuration
  DIAGRAMS_DRAWIO_VERSION: "26.2.2"
  DIAGRAMS_PNG_SCALE: "2.0"
  DIAGRAMS_PNG_QUALITY: "100"
  
  # File paths
  DIAGRAMS_CHANGELOG_FILE: "png_files/CHANGELOG.csv"
  DIAGRAMS_COUNTER_FILE: "drawio_files/.counter"
  
  # SharePoint configuration
  DIAGRAMS_SHAREPOINT_FOLDER: "Diagrams"
  DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME: "Diagrams_Changelog.csv"
  DIAGRAMS_SHAREPOINT_URL: "https://frostaag.sharepoint.com/sites/DatasphereFileConnector"
  # Site ID for SharePoint site
  DIAGRAMS_SHAREPOINT_SITE_ID: "e39939c2-992f-47cc-8b32-20aa466d71f4"
  # Drive ID with auto fallback option
  DIAGRAMS_SHAREPOINT_DRIVE_ID: "auto"
  # Original drive ID for backwards compatibility
  DIAGRAMS_SHAREPOINT_BASE_DRIVE_ID: "21e1e0f0-9247-45ab-9f8c-1d50c5c077db"
  
  # Network connectivity settings
  DIAGRAMS_USE_DIRECT_CONNECTION: "true"
  DIAGRAMS_FORCE_TLS12: "true"      # Teams notification configuration
  DIAGRAMS_TEAMS_NOTIFICATION_TITLE: "Draw.io Diagrams Processing Update"
  DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK: "https://frostaag.webhook.office.com/webhookb2/9cfe5169-8ba4-4923-b8d5-3ceacb07866c@a8d22be6-5bda-4bd7-8278-226c60c037ed/IncomingWebhook/1a12973b2f2d45cc972bfef2bace70b0/8c244c0d-59d9-4113-9646-16bf549a4a64/V26Sqxi96JeWY9ZYvmKydoRmWXY_NAy6wEVTz5o9ole5w1"

permissions:
  contents: write

jobs:
  process-drawio-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set script permissions
        run: |
          chmod +x ./scripts/*.sh
          
      - name: Setup DrawIO
        run: |
          echo "Installing DrawIO version ${{ env.DIAGRAMS_DRAWIO_VERSION }}"
          sudo apt-get update
          
          # Install dependencies required for headless operation
          sudo apt-get install -y wget xvfb libgbm1 libnspr4 libnss3 libxss1 \
            libxtst6 libgtk-3-0 libx11-xcb1 libdrm2 \
            libatk-bridge2.0-0 libsecret-1-0
          
          # Download DrawIO with retry logic
          MAX_RETRIES=3
          RETRY=0
          DOWNLOAD_SUCCESS=false
          
          while [ $RETRY -lt $MAX_RETRIES ] && [ "$DOWNLOAD_SUCCESS" != "true" ]; do
            echo "Download attempt $(($RETRY+1)) of $MAX_RETRIES"
            if wget -q https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DIAGRAMS_DRAWIO_VERSION }}/drawio-amd64-${{ env.DIAGRAMS_DRAWIO_VERSION }}.deb; then
              DOWNLOAD_SUCCESS=true
              echo "Download successful"
            else
              RETRY=$(($RETRY+1))
              if [ $RETRY -lt $MAX_RETRIES ]; then
                echo "Retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          
          if [ "$DOWNLOAD_SUCCESS" != "true" ]; then
            echo "::error::Failed to download DrawIO after $MAX_RETRIES attempts"
            exit 1
          fi
          
          # Install DrawIO
          sudo apt-get install -y ./drawio-amd64-${{ env.DIAGRAMS_DRAWIO_VERSION }}.deb
          
          # Configure and verify installation
          echo "Installed DrawIO version:"
          xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" drawio --version || echo "Cannot determine version, but continuing"
          
          # Test that the conversion works
          echo "<mxfile><diagram name='Test'>dZHBDoMgDIafhrtC5uLcnJs7efBMRCZkKGhYts3HTwXmkm1JL037f/1pKcQ0b/ea1cWBOSghfVcUYiZk6McpySiDCvcKVkVFcW3jPT4vuHgBwkmIbYu9UxL8IGuUDiOTDDkIe2Bju4SM+UOw3EF6ngQ7vSLbIukzznboLJhlzonekqklOct5qQM/rTl9Cdtdpzt7modNwLwo+hX88B6Ulu37BfkH</diagram></mxfile>" > /tmp/test.drawio
          mkdir -p /tmp/output
          if xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" drawio -x -f png --scale 2 --quality 100 -o /tmp/output/test.png /tmp/test.drawio; then
            echo "DrawIO conversion test successful!"
          else
            echo "DrawIO conversion test failed, but continuing anyway. May need troubleshooting during actual conversions."
          fi

      - name: Create output directories
        run: |
          mkdir -p png_files
          mkdir -p drawio_files
          if [ ! -f "${{ env.DIAGRAMS_COUNTER_FILE }}" ]; then
            echo "001" > "${{ env.DIAGRAMS_COUNTER_FILE }}"
          fi
          if [ ! -f "${{ env.DIAGRAMS_CHANGELOG_FILE }}" ]; then
            echo "Date,Time,Diagram,File,Action,Commit Message,Version,Commit Hash,Author Name" > "${{ env.DIAGRAMS_CHANGELOG_FILE }}"
          fi

      - name: Process Draw.io files
        id: process_files
        run: |
          # Detect changed files
          if [ -n "${{ github.event.inputs.specific_file }}" ]; then
            # Use the specific file from workflow input
            CHANGED_FILES="${{ github.event.inputs.specific_file }}"
          else
            # Detect changed files in the commit
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before || 'HEAD^' }} ${{ github.sha }} -- "drawio_files/*.drawio" | tr '\n' ' ')
            
            # If no files found and this is a manual trigger, check all files
            if [ -z "$CHANGED_FILES" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Manual trigger detected. Finding all .drawio files..."
              CHANGED_FILES=$(find drawio_files -name "*.drawio" -type f | tr '\n' ' ')
            fi
            
            # Output the files we're going to process
            echo "Files to process: $CHANGED_FILES"
          fi
          
          # Store for other steps
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          
          # Process the files
          bash ./scripts/process_drawio_files.sh
          
          # Count processed files and create summary
          PROCESSED_COUNT=$(find png_files -name "*.png" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | wc -l)
          FAILED_COUNT=$(find png_files -name "*.png.error" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | wc -l)
          
          # Set output variables for use in other steps
          echo "PROCESSED_COUNT=$PROCESSED_COUNT" >> $GITHUB_ENV
          echo "FAILED_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
          
          # Create a summary output
          echo "## Draw.io Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Successfully processed files: $PROCESSED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Failed conversions: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ $PROCESSED_COUNT -eq 0 ] && [ $FAILED_COUNT -eq 0 ]; then
            echo "No files were processed. This could be because:" >> $GITHUB_STEP_SUMMARY
            echo "- No .drawio files were changed in this commit" >> $GITHUB_STEP_SUMMARY
            echo "- File detection logic couldn't find any changed files" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "$CHANGED_FILES" ]; then
              echo "WARNING: Files were detected but not processed: $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # List changed files in the summary
          if [ $PROCESSED_COUNT -gt 0 ]; then
            echo "### Processed Files:" >> $GITHUB_STEP_SUMMARY
            find png_files -name "*.png" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | while read -r file; do
              echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "### Failed Conversions:" >> $GITHUB_STEP_SUMMARY
            find png_files -name "*.png.error" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | while read -r file; do
              echo "- $(basename "${file%.error}")" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Exit with error if any conversions failed
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "::warning::$FAILED_COUNT file(s) failed to convert. See summary for details."
          fi
        env:
          SPECIFIC_FILE: ${{ github.event.inputs.specific_file }}
          CHANGED_FILES: "${{ env.CHANGED_FILES }}"
          DIAGRAMS_PNG_SCALE: ${{ env.DIAGRAMS_PNG_SCALE }}
          DIAGRAMS_PNG_QUALITY: ${{ env.DIAGRAMS_PNG_QUALITY }}
          DIAGRAMS_COUNTER_FILE: ${{ env.DIAGRAMS_COUNTER_FILE }}
          DIAGRAMS_CHANGELOG_FILE: ${{ env.DIAGRAMS_CHANGELOG_FILE }}

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add png_files/ drawio_files/ ${{ env.DIAGRAMS_CHANGELOG_FILE }} ${{ env.DIAGRAMS_COUNTER_FILE }}
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            # Make the commit
            git commit -m "Update diagram files and changelog [skip ci]"
            
            # Use PAT for authentication if available, otherwise use GITHUB_TOKEN
            echo "Configuring Git for pushes..."
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            
            # Attempt to push with error handling
            echo "Attempting to push changes..."
            if ! git push; then
              echo "::warning::Failed to push changes with GITHUB_TOKEN. This is likely a permission issue."
              echo "::warning::Make sure the repository has write permissions enabled for GitHub Actions."
              echo "::warning::For more information, see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication"
              exit 0  # Don't fail the workflow, just warn
            fi
          else
            echo "No changes to commit"
          fi

      - name: Test SharePoint Connectivity
        id: sharepoint_test
        continue-on-error: true
        run: |
          echo "=== SHAREPOINT CONFIGURATION ==="
          echo "TENANT_ID: ${SHAREPOINT_TENANT_ID}"
          echo "SITE_ID: ${SHAREPOINT_SITE_ID}"
          echo "URL: ${SHAREPOINT_URL}"
          echo "FOLDER: ${SHAREPOINT_FOLDER}"
          echo "OUTPUT_FILENAME: ${SHAREPOINT_OUTPUT_FILENAME}"
          echo "DRIVE_ID: ${SHAREPOINT_DRIVE_ID}"
          
          # Verify essential credentials are present
          CREDENTIAL_ISSUES=false
          if [ -z "$SHAREPOINT_CLIENT_ID" ]; then
            echo "❌ ERROR: SHAREPOINT_CLIENT_ID is not set"
            CREDENTIAL_ISSUES=true
          else
            echo "✅ SHAREPOINT_CLIENT_ID is set (${#SHAREPOINT_CLIENT_ID} characters)"
          fi
          
          if [ -z "$SHAREPOINT_CLIENT_SECRET" ]; then
            echo "❌ ERROR: SHAREPOINT_CLIENT_SECRET is not set"
            CREDENTIAL_ISSUES=true
          else
            echo "✅ SHAREPOINT_CLIENT_SECRET is set (${#SHAREPOINT_CLIENT_SECRET} characters)"
          fi
          
          if [ -z "$SHAREPOINT_TENANT_ID" ]; then
            echo "❌ ERROR: SHAREPOINT_TENANT_ID is not set"
            CREDENTIAL_ISSUES=true
          else
            echo "✅ SHAREPOINT_TENANT_ID is set: $SHAREPOINT_TENANT_ID"
          fi
          
          if [ "$SHAREPOINT_DRIVE_ID" = "auto" ]; then
            echo "✅ Drive ID set to 'auto' - will use auto-detection"
          fi
          
          if [ "$CREDENTIAL_ISSUES" = "true" ]; then
            echo "⚠️ Some credentials are missing. SharePoint upload will likely fail."
            echo "sharepoint_credentials_ok=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "==============================="
          
          echo "🔍 Testing SharePoint connectivity..."
          
          # Environment variables for network connectivity
          export USE_DIRECT_CONNECTION="true"  # Avoid proxy issues
          export CURL_OPTS="--noproxy '*' --tlsv1.2 --connect-timeout 30 --max-time 60"
          
          # Run the test script with test mode to check connectivity without uploading
          if TEST_MODE=true bash ./scripts/advanced_sharepoint_test.sh -c "$SHAREPOINT_CLIENT_ID" \
             -s "$SHAREPOINT_CLIENT_SECRET" -t "$SHAREPOINT_TENANT_ID" -i "$SHAREPOINT_SITE_ID"; then
            echo "🟢 SharePoint connectivity test successful!"
            echo "sharepoint_connectivity_ok=true" >> $GITHUB_OUTPUT
          else
            echo "🔴 SharePoint connectivity test failed."
            echo "sharepoint_connectivity_ok=false" >> $GITHUB_OUTPUT
          fi
        env:
          SHAREPOINT_CLIENT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}
          SHAREPOINT_TENANT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}
          SHAREPOINT_SITE_ID: ${{ env.DIAGRAMS_SHAREPOINT_SITE_ID }}
          SHAREPOINT_URL: ${{ env.DIAGRAMS_SHAREPOINT_URL }}
          SHAREPOINT_FOLDER: ${{ env.DIAGRAMS_SHAREPOINT_FOLDER }}
          SHAREPOINT_OUTPUT_FILENAME: ${{ env.DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME }}
          SHAREPOINT_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_DRIVE_ID }}
          SHAREPOINT_BASE_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_BASE_DRIVE_ID }}
          CHANGELOG_FILE: ${{ env.DIAGRAMS_CHANGELOG_FILE }}

      - name: Check if Diagrams folder exists in SharePoint
        if: vars.DIAGRAMS_SHAREPOINT_CLIENT_ID != '' && vars.DIAGRAMS_SHAREPOINT_TENANT_ID != ''
        run: |
          echo "📁 Checking if Diagrams folder exists in SharePoint (default library)..."
          
          # Auth to Microsoft Graph
          echo "Getting access token..."
          AUTH_RESPONSE=$(curl --noproxy '*' --tlsv1.2 -s -X POST \
            "https://login.microsoftonline.com/${SHAREPOINT_TENANT_ID}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${SHAREPOINT_CLIENT_ID}&scope=https://graph.microsoft.com/.default&client_secret=${SHAREPOINT_CLIENT_SECRET}&grant_type=client_credentials")
          
          ACCESS_TOKEN=$(echo "$AUTH_RESPONSE" | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "::warning::Could not get access token to check folder. Will try to upload anyway."
            exit 0
          fi
          
          # Try to use the specified drive ID, or fall back to base drive ID if it's set to auto
          DRIVE_ID_TO_USE="${SHAREPOINT_DRIVE_ID}"
          if [[ "$DRIVE_ID_TO_USE" == "auto" ]]; then
            DRIVE_ID_TO_USE="${SHAREPOINT_BASE_DRIVE_ID}"
            echo "Drive ID was set to 'auto'; using base drive ID for this step: ${DRIVE_ID_TO_USE}"
          fi
          
          # Check if Diagrams folder exists directly in the root (default document library)
          FOLDER_CHECK_URL="https://graph.microsoft.com/v1.0/sites/${SHAREPOINT_SITE_ID}/drives/${DRIVE_ID_TO_USE}/root:/Diagrams"
          echo "Checking for Diagrams folder at: $FOLDER_CHECK_URL"
          
          FOLDER_RESPONSE=$(curl --noproxy '*' --tlsv1.2 -s -X GET "$FOLDER_CHECK_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json")
          
          echo "Folder check response (partial): ${FOLDER_RESPONSE:0:100}..."
          
          if [[ "$FOLDER_RESPONSE" == *"\"id\":"* ]]; then
            echo "✅ Diagrams folder already exists."
            echo "DIAGRAMS_FOLDER_EXISTS=true" >> $GITHUB_ENV
          elif [[ "$FOLDER_RESPONSE" == *"error"* && "$FOLDER_RESPONSE" == *"itemNotFound"* ]]; then
            echo "📁 Diagrams folder does not exist. It will be created during upload."
            echo "DIAGRAMS_FOLDER_EXISTS=false" >> $GITHUB_ENV
          else
            echo "⚠️ Couldn't determine if Diagrams folder exists. Will attempt to use it directly."
            echo "DIAGRAMS_FOLDER_EXISTS=unknown" >> $GITHUB_ENV
          fi
        env:
          SHAREPOINT_CLIENT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}
          SHAREPOINT_TENANT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}
          SHAREPOINT_SITE_ID: ${{ env.DIAGRAMS_SHAREPOINT_SITE_ID }}
          SHAREPOINT_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_DRIVE_ID }}
          SHAREPOINT_BASE_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_BASE_DRIVE_ID }}

      # First try using the Node.js script with auto-detection
      - name: Upload changelog to SharePoint (Node.js approach)
        id: nodejs_upload
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              console.log('📤 Uploading changelog to SharePoint using Node.js approach...');
              
              // Make script executable
              execSync('chmod +x ./scripts/sharepoint_upload.js');
              
              // Execute the Node.js upload script
              const result = execSync('node ./scripts/sharepoint_upload.js', { 
                env: process.env,
                encoding: 'utf8' 
              });
              
              console.log("SharePoint upload script output:");
              console.log(result);
              
              if (result.includes("File uploaded successfully") || result.includes("✅")) {
                console.log("✅ SharePoint upload via Node.js completed successfully.");
                core.exportVariable('UPLOAD_SUCCESS', 'true');
                
                // Add to summary
                await core.summary
                  .addHeading('SharePoint Upload Status')
                  .addRaw('✅ Successfully uploaded changelog to SharePoint')
                  .addRaw(`<p>File URL: ${process.env.DIAGRAMS_SHAREPOINT_URL}/Documents/${process.env.DIAGRAMS_SHAREPOINT_FOLDER}/${process.env.DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME}</p>`)
                  .write();
                  
                return true;
              } else {
                console.log("⚠️ SharePoint upload via Node.js may have issues, check logs.");
                core.exportVariable('UPLOAD_SUCCESS', 'false');
                return false;
              }
            } catch (error) {
              console.error(`Error in Node.js upload: ${error.message}`);
              core.exportVariable('UPLOAD_SUCCESS', 'false');
              return false;
            }
        env:
          TENANT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}
          CLIENT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}
          SITE_ID: ${{ env.DIAGRAMS_SHAREPOINT_SITE_ID }}
          DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_DRIVE_ID }}
          FOLDER_PATH: ${{ env.DIAGRAMS_SHAREPOINT_FOLDER }}
          FILE_NAME: ${{ env.DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME }}
          FILE_PATH: ${{ env.DIAGRAMS_CHANGELOG_FILE }}

      # Fall back to shell script approach if Node.js fails
      - name: Upload changelog to SharePoint (Shell script fallback)
        if: ${{ steps.nodejs_upload.outcome == 'failure' || env.UPLOAD_SUCCESS != 'true' }}
        continue-on-error: true
        run: |
          echo "📤 Attempting SharePoint upload using shell scripts (fallback method)..."
          
          # Make scripts executable again to be safe
          chmod +x ./scripts/direct_sharepoint_upload.sh
          chmod +x ./scripts/fixed_sharepoint_upload.sh
          chmod +x ./scripts/upload_to_sharepoint.sh
          
          # Set explicit environment variables for fixed script
          export SHAREPOINT_DRIVE_ID="${SHAREPOINT_BASE_DRIVE_ID}"
          export USE_DIRECT_CONNECTION="true"
          export FORCE_TLS="true"
          
          echo "SharePoint configuration:"
          echo "- Site ID: ${SHAREPOINT_SITE_ID}"
          echo "- Drive ID: ${SHAREPOINT_DRIVE_ID}"
          echo "- Folder: ${SHAREPOINT_FOLDER}"
          echo "- Target path: Shared Documents/${SHAREPOINT_FOLDER}/${SHAREPOINT_OUTPUT_FILENAME}"
          
          # Try the new direct upload script first with proper URL encoding
          echo "💾 Using direct upload script with URL encoding for spaces..."
          if bash ./scripts/direct_sharepoint_upload.sh; then
            echo "✅ SharePoint upload completed successfully."
            echo "## SharePoint Upload Status" >> $GITHUB_STEP_SUMMARY
            echo "✅ Successfully uploaded changelog to SharePoint" >> $GITHUB_STEP_SUMMARY
            echo "File URL: ${SHAREPOINT_URL}/Shared Documents/${SHAREPOINT_FOLDER}/${SHAREPOINT_OUTPUT_FILENAME}" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # If the direct method fails, try the fixed script
          echo "🔄 Direct upload failed, trying fixed upload script..."
          if bash ./scripts/fixed_sharepoint_upload.sh; then
            echo "✅ SharePoint upload completed successfully with fixed script."
            echo "## SharePoint Upload Status" >> $GITHUB_STEP_SUMMARY
            echo "✅ Successfully uploaded changelog to SharePoint" >> $GITHUB_STEP_SUMMARY
            echo "File URL: ${SHAREPOINT_URL}/Shared Documents/${SHAREPOINT_FOLDER}/${SHAREPOINT_OUTPUT_FILENAME}" >> $GITHUB_STEP_SUMMARY
          else
            echo "::warning::Fixed SharePoint upload script failed. Trying original script..."
            echo "## SharePoint Upload Status" >> $GITHUB_STEP_SUMMARY
            echo "❌ Failed to upload changelog with fixed script" >> $GITHUB_STEP_SUMMARY
            
            # Fallback to regular upload script as a backup attempt
            echo "🔄 Attempting upload with original script as final fallback..."
            if bash ./scripts/upload_to_sharepoint.sh; then
              echo "✅ Fallback SharePoint upload succeeded."
              echo "✅ Successfully uploaded using fallback method" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ All SharePoint upload methods failed."
              echo "Please review the following:" >> $GITHUB_STEP_SUMMARY
              echo "1. Verify your Azure App registration has the necessary permissions" >> $GITHUB_STEP_SUMMARY
              echo "2. Ensure the credentials are correctly configured" >> $GITHUB_STEP_SUMMARY
              echo "3. Check network connectivity from GitHub Actions to Microsoft Graph API" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        env:
          SHAREPOINT_CLIENT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}
          SHAREPOINT_TENANT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}
          SHAREPOINT_SITE_ID: ${{ env.DIAGRAMS_SHAREPOINT_SITE_ID }}
          SHAREPOINT_URL: ${{ env.DIAGRAMS_SHAREPOINT_URL }}
          SHAREPOINT_FOLDER: ${{ env.DIAGRAMS_SHAREPOINT_FOLDER }}
          SHAREPOINT_OUTPUT_FILENAME: ${{ env.DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME }}
          SHAREPOINT_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_DRIVE_ID }}
          SHAREPOINT_BASE_DRIVE_ID: ${{ env.DIAGRAMS_SHAREPOINT_BASE_DRIVE_ID }}
          CHANGELOG_FILE: ${{ env.DIAGRAMS_CHANGELOG_FILE }}
          USE_DIRECT_CONNECTION: "true"
          FORCE_TLS: "true"

      - name: Send Teams notification on success
        if: success()
        env:
          TEAMS_WEBHOOK_URL: ${{ env.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}
          NOTIFICATION_TITLE: ${{ env.DIAGRAMS_TEAMS_NOTIFICATION_TITLE }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Make scripts executable
          chmod +x ./scripts/send_teams_notification.sh
          chmod +x ./scripts/success_notification.sh
          
          # Debug webhook URL
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            echo "Teams webhook URL is configured and ready for notifications"
            echo "TEAMS_WEBHOOK_URL length: ${#TEAMS_WEBHOOK_URL} characters"
          else
            echo "Teams webhook URL is not configured"
          fi
          
          # Print information used for notification
          echo "Workflow info:"
          echo "- Repository: $GITHUB_REPOSITORY"
          echo "- Actor: $GITHUB_ACTOR"
          echo "- Workflow: $GITHUB_WORKFLOW"
          echo "- Run ID: $GITHUB_RUN_ID"
          
          # Check if webhook URL is available
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            echo "Sending success notification to Teams..."
            
            # Run the success notification script
            ./scripts/success_notification.sh \
              "$TEAMS_WEBHOOK_URL" \
              "$GITHUB_REPOSITORY" \
              "$GITHUB_SHA" \
              "$GITHUB_WORKFLOW" \
              "$GITHUB_RUN_ID"
          else
            echo "::warning::Teams webhook URL not configured. Skipping notification."
          fi

      - name: Notify on failure
        if: failure()
        env:
          TEAMS_WEBHOOK_URL: ${{ env.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}
          NOTIFICATION_TITLE: ${{ env.DIAGRAMS_TEAMS_NOTIFICATION_TITLE }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Make scripts executable
          chmod +x ./scripts/send_teams_notification.sh
          chmod +x ./scripts/failure_notification.sh
          
          # Debug webhook URL (masked for security)
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            echo "Teams webhook URL is configured (value masked)"
          else
            echo "Teams webhook URL is not configured"
          fi
          
          # Print information used for notification
          echo "Workflow info:"
          echo "- Repository: $GITHUB_REPOSITORY"
          echo "- Actor: $GITHUB_ACTOR"
          echo "- Workflow: $GITHUB_WORKFLOW"
          echo "- Run ID: $GITHUB_RUN_ID"
          
          # Check if webhook URL is available
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            echo "Sending failure notification to Teams..."
            
            # Run the failure notification script
            ./scripts/failure_notification.sh \
              "$TEAMS_WEBHOOK_URL" \
              "$GITHUB_REPOSITORY" \
              "$GITHUB_SHA" \
              "$GITHUB_WORKFLOW" \
              "$GITHUB_RUN_ID"
          else
            echo "::warning::Teams webhook URL not configured. Skipping notification."
          fi
          
          echo "::error::The Draw.io processing workflow failed. Check the logs for details."
