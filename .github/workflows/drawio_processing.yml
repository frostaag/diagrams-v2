name: Draw.io Files Processing V2

on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to process (leave empty for all files)'
        required: false
        default: ''

concurrency:
  group: drawio-processing
  cancel-in-progress: false

env:
  # Draw.io configuration
  DRAWIO_VERSION: "26.2.2"
  PNG_SCALE: "2.0"
  PNG_QUALITY: "100"
  
  # File paths
  CHANGELOG_FILE: "png_files/CHANGELOG.csv"
  COUNTER_FILE: "drawio_files/.counter"
  
  # SharePoint configuration
  SHAREPOINT_FOLDER: "Diagrams"
  SHAREPOINT_OUTPUT_FILENAME: "Diagrams_Changelog.csv"
  SHAREPOINT_SITE_ID: "e39939c2-992f-47cc-8b32-20aa466d71f4"
  SHAREPOINT_BASE_DRIVE_ID: "21e1e0f0-9247-45ab-9f8c-1d50c5c077db"

permissions:
  contents: write

jobs:
  process-drawio-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Draw.io
        run: |
          echo "📦 Installing Draw.io ${{ env.DRAWIO_VERSION }}"
          
          # Update package list
          sudo apt-get update
          
          # Install required dependencies
          sudo apt-get install -y \
            wget xvfb imagemagick \
            libgbm1 libnspr4 libnss3 libxss1 libxtst6 \
            libgtk-3-0 libx11-xcb1 libdrm2 libatk-bridge2.0-0 libsecret-1-0
          
          # Download and install Draw.io
          wget -q "https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DRAWIO_VERSION }}/drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"
          sudo apt-get install -y "./drawio-amd64-${{ env.DRAWIO_VERSION }}.deb"
          
          # Verify installation
          echo "🔍 Verifying Draw.io installation..."
          xvfb-run --auto-servernum drawio --version || echo "Version check failed, but continuing"
          
          # Test ImageMagick
          echo "🔍 Verifying ImageMagick..."
          convert --version | head -1

      - name: Process Draw.io files
        run: |
          echo "🚀 Starting file processing..."
          
          # Make script executable
          chmod +x ./scripts/process_drawio_files_v2.sh
          
          # Set environment variables for the script
          export DIAGRAMS_COUNTER_FILE="${{ env.COUNTER_FILE }}"
          export DIAGRAMS_CHANGELOG_FILE="${{ env.CHANGELOG_FILE }}"
          export DIAGRAMS_PNG_SCALE="${{ env.PNG_SCALE }}"
          export DIAGRAMS_PNG_QUALITY="${{ env.PNG_QUALITY }}"
          export SPECIFIC_FILE="${{ github.event.inputs.specific_file }}"
          
          # Run the processing script
          ./scripts/process_drawio_files_v2.sh
        env:
          SPECIFIC_FILE: ${{ github.event.inputs.specific_file }}

      - name: Commit changes
        run: |
          echo "💾 Committing changes..."
          
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all changes
          git add png_files/ drawio_files/ ${{ env.CHANGELOG_FILE }} ${{ env.COUNTER_FILE }}
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            # Commit changes
            git commit -m "Process Draw.io files and update changelog [skip ci]"
            
            # Push changes
            echo "📤 Pushing changes..."
            git push
            
            echo "✅ Changes committed and pushed successfully"
          fi

      - name: Upload changelog to SharePoint
        if: success()
        continue-on-error: true
        run: |
          echo "📤 Uploading changelog to SharePoint..."
          
          # Get access token
          ACCESS_TOKEN=$(curl -s -X POST \
            "https://login.microsoftonline.com/${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}" \
            -d "client_secret=${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}" \
            -d "scope=https://graph.microsoft.com/.default" \
            -d "grant_type=client_credentials" | \
            jq -r '.access_token')
          
          if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]]; then
            echo "❌ Failed to get access token"
            exit 1
          fi
          
          # Upload changelog
          UPLOAD_URL="https://graph.microsoft.com/v1.0/sites/${{ env.SHAREPOINT_SITE_ID }}/drives/${{ env.SHAREPOINT_BASE_DRIVE_ID }}/root:/Documents/${{ env.SHAREPOINT_FOLDER }}/${{ env.SHAREPOINT_OUTPUT_FILENAME }}:/content"
          
          if curl -s -X PUT "$UPLOAD_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: text/csv" \
            --data-binary "@${{ env.CHANGELOG_FILE }}" | jq -r '.id' > /dev/null; then
            echo "✅ Successfully uploaded changelog to SharePoint"
            echo "📂 Location: Documents/${{ env.SHAREPOINT_FOLDER }}/${{ env.SHAREPOINT_OUTPUT_FILENAME }}"
          else
            echo "❌ Failed to upload changelog to SharePoint"
            exit 1
          fi

      - name: Send Teams notification
        if: always()
        continue-on-error: true
        run: |
          if [[ -z "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" ]]; then
            echo "📝 Teams webhook not configured, skipping notification"
            exit 0
          fi
          
          # Determine status and color
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS="✅ Success"
            COLOR="00FF00"
            TITLE="Draw.io Processing Completed Successfully"
          else
            STATUS="❌ Failed"
            COLOR="FF0000"
            TITLE="Draw.io Processing Failed"
          fi
          
          # Count processed files
          PROCESSED_COUNT=$(find png_files -name "*.png" -newer "${{ env.CHANGELOG_FILE }}" 2>/dev/null | wc -l || echo "0")
          FAILED_COUNT=$(find png_files -name "*.png.error" 2>/dev/null | wc -l || echo "0")
          
          # Create Teams message
          MESSAGE="{
            \"@type\": \"MessageCard\",
            \"@context\": \"https://schema.org/extensions\",
            \"summary\": \"$TITLE\",
            \"themeColor\": \"$COLOR\",
            \"sections\": [{
              \"activityTitle\": \"$TITLE\",
              \"activitySubtitle\": \"Repository: ${{ github.repository }}\",
              \"facts\": [
                {\"name\": \"Status\", \"value\": \"$STATUS\"},
                {\"name\": \"Processed Files\", \"value\": \"$PROCESSED_COUNT\"},
                {\"name\": \"Failed Files\", \"value\": \"$FAILED_COUNT\"},
                {\"name\": \"Triggered by\", \"value\": \"${{ github.actor }}\"},
                {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\"}
              ]
            }],
            \"potentialAction\": [{
              \"@type\": \"OpenUri\",
              \"name\": \"View Workflow\",
              \"targets\": [{
                \"os\": \"default\",
                \"uri\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
              }]
            }]
          }"
          
          # Send notification
          curl -H "Content-Type: application/json" \
            -d "$MESSAGE" \
            "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}"
          
          echo "📧 Teams notification sent"
