name: Draw.io Files Processing



on:
  push:
    paths:
      - 'drawio_files/**/*.drawio'
  workflow_dispatch:
    inputs:
      specific_file:
        description: 'Specific file to process (leave empty for all files)'
        required: false
        default: ''

env:
  # Draw.io configuration
  DIAGRAMS_DRAWIO_VERSION: "26.2.2"
  DIAGRAMS_PNG_SCALE: "2.0"
  DIAGRAMS_PNG_QUALITY: "100"
  
  # File paths
  DIAGRAMS_CHANGELOG_FILE: "png_files/CHANGELOG.csv"
  DIAGRAMS_COUNTER_FILE: "drawio_files/.counter"
  
  # SharePoint configuration
  DIAGRAMS_SHAREPOINT_FOLDER: "Diagrams"
  DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME: "Diagrams_Changelog.csv"
  
  # Teams notification configuration
  DIAGRAMS_TEAMS_NOTIFICATION_TITLE: "Draw.io Diagrams Processing Update"

permissions:
  contents: write

jobs:
  process-drawio-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set script permissions
        run: |
          chmod +x ./scripts/*.sh
          
      - name: Setup DrawIO
        run: |
          echo "Installing DrawIO version ${{ env.DIAGRAMS_DRAWIO_VERSION }}"
          sudo apt-get update
          
          # Install dependencies required for headless operation
          sudo apt-get install -y wget xvfb libgbm1 libnspr4 libnss3 libxss1 \
            libxtst6 libgtk-3-0 libx11-xcb1 libdrm2 \
            libatk-bridge2.0-0 libsecret-1-0
          
          # Download DrawIO with retry logic
          MAX_RETRIES=3
          RETRY=0
          DOWNLOAD_SUCCESS=false
          
          while [ $RETRY -lt $MAX_RETRIES ] && [ "$DOWNLOAD_SUCCESS" != "true" ]; do
            echo "Download attempt $(($RETRY+1)) of $MAX_RETRIES"
            if wget -q https://github.com/jgraph/drawio-desktop/releases/download/v${{ env.DIAGRAMS_DRAWIO_VERSION }}/drawio-amd64-${{ env.DIAGRAMS_DRAWIO_VERSION }}.deb; then
              DOWNLOAD_SUCCESS=true
              echo "Download successful"
            else
              RETRY=$(($RETRY+1))
              if [ $RETRY -lt $MAX_RETRIES ]; then
                echo "Retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          
          if [ "$DOWNLOAD_SUCCESS" != "true" ]; then
            echo "::error::Failed to download DrawIO after $MAX_RETRIES attempts"
            exit 1
          fi
          
          # Install DrawIO
          sudo apt-get install -y ./drawio-amd64-${{ env.DIAGRAMS_DRAWIO_VERSION }}.deb
          
          # Configure and verify installation
          echo "Installed DrawIO version:"
          xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" drawio --version || echo "Cannot determine version, but continuing"
          
          # Test that the conversion works
          echo "<mxfile><diagram name='Test'>dZHBDoMgDIafhrtC5uLcnJs7efBMRCZkKGhYts3HTwXmkm1JL037f/1pKcQ0b/ea1cWBOSghfVcUYiZk6McpySiDCvcKVkVFcW3jPT4vuHgBwkmIbYu9UxL8IGuUDiOTDDkIe2Bju4SM+UOw3EF6ngQ7vSLbIukzznboLJhlzonekqklOct5qQM/rTl9Cdtdpzt7modNwLwo+hX88B6Ulu37BfkH</diagram></mxfile>" > /tmp/test.drawio
          mkdir -p /tmp/output
          if xvfb-run --auto-servernum --server-args="-screen 0 1280x1024x24" drawio -x -f png --scale 2 --quality 100 -o /tmp/output/test.png /tmp/test.drawio; then
            echo "DrawIO conversion test successful!"
          else
            echo "DrawIO conversion test failed, but continuing anyway. May need troubleshooting during actual conversions."
          fi

      - name: Create output directories
        run: |
          mkdir -p png_files
          mkdir -p drawio_files
          if [ ! -f "${{ env.DIAGRAMS_COUNTER_FILE }}" ]; then
            echo "001" > "${{ env.DIAGRAMS_COUNTER_FILE }}"
          fi
          if [ ! -f "${{ env.DIAGRAMS_CHANGELOG_FILE }}" ]; then
            echo "Date,Time,Diagram,File,Action,Commit Message,Version,Commit Hash,Author Name" > "${{ env.DIAGRAMS_CHANGELOG_FILE }}"
          fi

      - name: Process Draw.io files
        id: process_files
        run: |
          # Detect changed files
          if [ -n "${{ github.event.inputs.specific_file }}" ]; then
            # Use the specific file from workflow input
            CHANGED_FILES="${{ github.event.inputs.specific_file }}"
          else
            # Detect changed files in the commit
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before || 'HEAD^' }} ${{ github.sha }} -- "drawio_files/*.drawio" | tr '\n' ' ')
            
            # If no files found and this is a manual trigger, check all files
            if [ -z "$CHANGED_FILES" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "Manual trigger detected. Finding all .drawio files..."
              CHANGED_FILES=$(find drawio_files -name "*.drawio" -type f | tr '\n' ' ')
            fi
            
            # Output the files we're going to process
            echo "Files to process: $CHANGED_FILES"
          fi
          
          # Store for other steps
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          
          # Process the files
          bash ./scripts/process_drawio_files.sh
          
          # Count processed files and create summary
          PROCESSED_COUNT=$(find png_files -name "*.png" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | wc -l)
          FAILED_COUNT=$(find png_files -name "*.png.error" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | wc -l)
          
          # Set output variables for use in other steps
          echo "PROCESSED_COUNT=$PROCESSED_COUNT" >> $GITHUB_ENV
          echo "FAILED_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
          
          # Create a summary output
          echo "## Draw.io Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Successfully processed files: $PROCESSED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Failed conversions: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ $PROCESSED_COUNT -eq 0 ] && [ $FAILED_COUNT -eq 0 ]; then
            echo "No files were processed. This could be because:" >> $GITHUB_STEP_SUMMARY
            echo "- No .drawio files were changed in this commit" >> $GITHUB_STEP_SUMMARY
            echo "- File detection logic couldn't find any changed files" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "$CHANGED_FILES" ]; then
              echo "WARNING: Files were detected but not processed: $CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # List changed files in the summary
          if [ $PROCESSED_COUNT -gt 0 ]; then
            echo "### Processed Files:" >> $GITHUB_STEP_SUMMARY
            find png_files -name "*.png" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | while read -r file; do
              echo "- $(basename "$file")" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "### Failed Conversions:" >> $GITHUB_STEP_SUMMARY
            find png_files -name "*.png.error" -type f -newer "${{ env.DIAGRAMS_CHANGELOG_FILE }}" | while read -r file; do
              echo "- $(basename "${file%.error}")" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Exit with error if any conversions failed
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "::warning::$FAILED_COUNT file(s) failed to convert. See summary for details."
          fi
        env:
          SPECIFIC_FILE: ${{ github.event.inputs.specific_file }}
          DIAGRAMS_PNG_SCALE: ${{ env.DIAGRAMS_PNG_SCALE }}
          DIAGRAMS_PNG_QUALITY: ${{ env.DIAGRAMS_PNG_QUALITY }}
          DIAGRAMS_COUNTER_FILE: ${{ env.DIAGRAMS_COUNTER_FILE }}
          DIAGRAMS_CHANGELOG_FILE: ${{ env.DIAGRAMS_CHANGELOG_FILE }}

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add png_files/ drawio_files/ ${{ env.DIAGRAMS_CHANGELOG_FILE }} ${{ env.DIAGRAMS_COUNTER_FILE }}
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            # Make the commit
            git commit -m "Update diagram files and changelog [skip ci]"
            
            # Use PAT for authentication if available, otherwise use GITHUB_TOKEN
            echo "Configuring Git for pushes..."
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            
            # Attempt to push with error handling
            echo "Attempting to push changes..."
            if ! git push; then
              echo "::warning::Failed to push changes with GITHUB_TOKEN. This is likely a permission issue."
              echo "::warning::Make sure the repository has write permissions enabled for GitHub Actions."
              echo "::warning::For more information, see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication"
              exit 0  # Don't fail the workflow, just warn
            fi
          else
            echo "No changes to commit"
          fi

      - name: Upload to SharePoint
        continue-on-error: true  # Allow workflow to continue even if SharePoint upload fails
        run: |
          echo "Attempting to upload to SharePoint..."
          if ! bash ./scripts/upload_to_sharepoint.sh; then
            echo "::warning::SharePoint upload failed. This is likely due to missing or invalid credentials."
            echo "::warning::Make sure you have set the following secrets and variables:"
            echo "::warning::  - DIAGRAMS_SHAREPOINT_CLIENT_ID (variable)"
            echo "::warning::  - DIAGRAMS_SHAREPOINT_CLIENTSECRET (secret)"
            echo "::warning::  - DIAGRAMS_SHAREPOINT_TENANT_ID (variable)" 
            echo "::warning::  - DIAGRAMS_SHAREPOINT_SITE_ID (variable)"
          else
            echo "SharePoint upload completed successfully."
          fi
        env:
          SHAREPOINT_CLIENT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.DIAGRAMS_SHAREPOINT_CLIENTSECRET }}
          SHAREPOINT_TENANT_ID: ${{ vars.DIAGRAMS_SHAREPOINT_TENANT_ID }}
          SHAREPOINT_SITE_ID: ${{ vars.DIAGRAMS_SHAREPOINT_SITE_ID }}
          SHAREPOINT_FOLDER: ${{ env.DIAGRAMS_SHAREPOINT_FOLDER }}
          SHAREPOINT_OUTPUT_FILENAME: ${{ env.DIAGRAMS_SHAREPOINT_OUTPUT_FILENAME }}
          CHANGELOG_FILE: ${{ env.DIAGRAMS_CHANGELOG_FILE }}

      - name: Send Teams notification on success
        if: success()
        run: |
          # Make scripts executable
          chmod +x ./scripts/send_teams_notification.sh
          chmod +x ./scripts/success_notification.sh
          
          # Check if webhook URL is available
          if [ -n "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" ]; then
            echo "Sending success notification to Teams..."
            
            # Run the success notification script
            ./scripts/success_notification.sh \
              "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" \
              "$GITHUB_REPOSITORY" \
              "$GITHUB_SHA" \
              "$GITHUB_WORKFLOW" \
              "$GITHUB_RUN_ID"
          else
            echo "::warning::Teams webhook URL not configured. Skipping notification."
          fi

      - name: Notify on failure
        if: failure()
        run: |
          # Make scripts executable
          chmod +x ./scripts/send_teams_notification.sh
          chmod +x ./scripts/failure_notification.sh
          
          # Check if webhook URL is available
          if [ -n "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" ]; then
            echo "Sending failure notification to Teams..."
            
            # Run the failure notification script
            ./scripts/failure_notification.sh \
              "${{ secrets.DIAGRAMS_TEAMS_NOTIFICATION_WEBHOOK }}" \
              "$GITHUB_REPOSITORY" \
              "$GITHUB_SHA" \
              "$GITHUB_WORKFLOW" \
              "$GITHUB_RUN_ID"
          else
            echo "::warning::Teams webhook URL not configured. Skipping notification."
          fi
          
          echo "::error::The Draw.io processing workflow failed. Check the logs for details."
